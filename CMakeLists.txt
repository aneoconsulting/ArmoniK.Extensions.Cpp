cmake_minimum_required(VERSION 3.22)

set(VERSION 0.1.0)

set(SOLUTION_NAME ArmoniK.SDK)
project(${SOLUTION_NAME} C CXX)

if (UNIX)
    list(APPEND CMAKE_PREFIX_PATH "/armonik/api")
    set(BUILD_DIR "/app/build")
elseif (WIN32)
    set(BUILD_DIR "${CMAKE_SOURCE_DIR}/build")
    list(APPEND CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}/tools/win64/lib/cmake/grpc")
    list(APPEND CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}/tools/win64/cmake")
    list(APPEND CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}/../ArmoniK.Api/packages/cpp/out/install/x64-Debug")
    set(Protobuf_USE_STATIC_LIBS ON)
endif (UNIX)

set(CMAKE_CXX_STANDARD 17)

# make cache variables for install destinations
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

option(BUILD_END2END "Build End2End test" OFF)
option(BUILD_TESTS "Build Unit Tests" OFF)
option(BUILD_WORKER "Build Worker" ON)
option(BUILD_CLIENT "Build Client" ON)
option(BUILD_DLLWORKER "Build DynamicWorker" OFF)

function(setup_options project_name_param)

    file(READ /etc/issue ${PROJECT_NAME}_ETCISSUE_CONTENT)
    string(FIND "${${project_name_param}_ETCISSUE_CONTENT}" "Alpine" IS_ALPINE)

    if(${ARGC} GREATER 1)
        set(extra_param ${ARGV1})
    endif()

    if(MSVC)
        target_compile_options(${project_name_param} PRIVATE /W4)
    else()
        if(CMAKE_BUILD_TYPE MATCHES DEBUG AND IS_ALPINE EQUAL -1)
            target_compile_options(${project_name_param} PRIVATE -Wall -Wextra -Wpedantic -fsanitize=undefined,address ${extra_param})
        else ()
            target_compile_options(${project_name_param} PRIVATE -Wall -Wextra -Wpedantic ${extra_param})
        endif()
    endif()

    if(IS_ALPINE EQUAL -1)
        message(STATUS "Not found Alpine distribution " ${IS_ALPINE})
    else()
        message(STATUS "Found Alpine distribution " ${IS_ALPINE})
    endif()

    if(CMAKE_BUILD_TYPE MATCHES DEBUG AND IS_ALPINE EQUAL -1)
        target_link_options(${project_name_param} PRIVATE -fsanitize=undefined,address ${extra_param})
    endif()
endfunction()

if(BUILD_DLLWORKER)
    # TODO Move to normal worker build when End2End separated (needs ExternalProject_Add)
    list(APPEND CMAKE_PREFIX_PATH "/app/install")
    add_subdirectory(ArmoniK.SDK.DLLWorker)
else()
    if(BUILD_END2END)
        list(APPEND CMAKE_PREFIX_PATH "/app/install")
        if(BUILD_CLIENT)
            add_subdirectory(ArmoniK.SDK.Client.Test)
        endif()
        if(UNIX AND BUILD_WORKER)
            add_subdirectory(ArmoniK.SDK.Worker.Test)
        endif()
    else ()
        add_subdirectory(ArmoniK.SDK.Common)
        if(BUILD_CLIENT)
            add_subdirectory(ArmoniK.SDK.Client)
        endif()
        if(UNIX AND BUILD_WORKER)
            add_subdirectory(ArmoniK.SDK.Worker)
        endif()
    endif ()
endif()
